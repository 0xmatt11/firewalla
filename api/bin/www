#!/usr/bin/env node
'use strict'

let log = require("../../net2/logger.js")(__filename);

log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
log.info("API Starting ");
log.info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

let bone = require("../../lib/Bone.js");

if(!bone.isAppConnected()) {
  log.info("Waiting for pairing from first app...");
}

run0();

function run0() {
  if (bone.cloudready()==true &&
      bone.isAppConnected()) {
    run();
  } else {
    setTimeout(()=>{
      run0();
    },1000);
  }
}

/**
 * Module dependencies.
 */

let config = JSON.parse(require('fs').readFileSync('../net2/config.json', 'utf8'));
let debug = require('debug')('api:server');
let http = require('http');

var server;

function run() {

  let app = require('../app');
  let port = normalizePort(process.env.PORT || '8833');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('uncaughtException',(err)=>{
    console.log("################### CRASH #############");
    console.log("+-+-+-",err.message,err.stack);
    if (err && err.message && err.message.includes("Redis connection")) {
        return;
    }
    bone.log("error",{version:config.version,type:'FIREWALLA.UI.exception',msg:err.message,stack:err.stack},null);
    setTimeout(()=>{
        process.exit(1);
    },1000*2);
});
