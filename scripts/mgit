#!/bin/bash

# ----------------------------------------------------------------------------
# This is a wrapper of Git that can recover given local repository from
# disruptive action, like power off or SD card extraction.
# ----------------------------------------------------------------------------

MGIT_DIR=$HOME/.mgit
MGIT_REPOS=$MGIT_DIR/repos
LOCK_TIMEOUT=1800

function marked_git {
    repo_name=$(basename $PWD)
    mgit_repo=$MGIT_REPOS/$repo_name
    lock_file=$MGIT_REPOS/$repo_name/lock
    marker_file=$MGIT_REPOS/$repo_name/git-in-progress
    (
    flock -w $LOCK_TIMEOUT 9 || exit 1


    # save repo info
    mkdir -p $mgit_repo
    git remote get-url origin > $mgit_repo/url
    sync
    git rev-parse --abbrev-ref HEAD > $mgit_repo/branch
    sync

    # lay down the marker file
    date > $marker_file
    sync

    # execute actual git command
    git "$@" || _rc=1

    # clean up marker afterwards
    rm -f $marker_file
    sync
    ) 9>$lock_file || return 1

    return 0

}

function get_repo_default {
    rname=$1
    item=$2
    case $rname in
        firewalla)
        case $item in
            url)    echo 'https://github.com/firewalla/firewalla.git' ;;
            branch) echo 'release_6_0' ;;
        esac
        ;;
        .node_modules)
        case $item in
            url)    echo 'https://github.com/firewalla/firewalla.git' ;;
            branch) echo 'release_6_0' ;;
        esac
        ;;
    esac
}


function recover {
    _rc=0
    cd $HOME
    for repo_name in $(ls -a $MGIT_REPOS)
    do
        case $repo_name in

            .|..)
            continue
            ;;

            *)

            need_recover=0

            # recover if marker file found
            marker_file=$MGIT_REPOS/$repo_name/git-in-progress
            test -e $marker_file && need_recover=1

            if [[ -d $repo_name ]]
            then
                # recover if git status failed inside repo_name dir
                gs_out=$(cd $repo_name; git status -uno --porcelain) || need_recover=1
            else
                # recover if repo_name dir not found
                need_recover=1
            fi

            if [[ $need_recover -eq 1 ]]
            then
                lock_file=$MGIT_REPOS/$repo_name/lock
                (
                flock -w $LOCK_TIMEOUT 9 || exit 1
                url=$(cat $MGIT_REPOS/$repo_name/url)
                branch=$(cat $MGIT_REPOS/$repo_name/branch)
                if git clone --branch ${branch:=$(get_repo_default $repo_name branch)} \
                             --single-branch ${url:=$(get_repo_default $repo_name url)} \
                             ${repo_name}.recover
                then
                    # recover OK
                    mv ${repo_name} ${repo_name}.old
                    mv ${repo_name}.recover ${repo_name}
                    rm -rf ${repo_name}.old
                    sync
                    rm -f $marker_file
                    sync
                else
                    # recover failed
                    exit 1
                fi
                ) 9>$lock_file ||_rc=1
            fi
            ;;
        esac
    done
    return $_rc
}


# ----------------------------------------------------------------------------
# MAIN goes here
# ----------------------------------------------------------------------------

rc=0
if [[ $# -eq 0 ]]; then
    git
else
    mkdir -p $MGIT_REPOS
    case $1 in

        fetch|pull|reset)
            marked_git "$@" || exit 1
            ;;

        recover)
            recover || exit 1
            ;;

        *)
            git "$@" || rc=1
            ;;
    esac
fi

exit $rc
